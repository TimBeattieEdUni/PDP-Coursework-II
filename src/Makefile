##############################################################################
# MSc HPC
# Parallel Design Patterns
# Coursework
# Exam no. B063622
#
# Makefile for directory "src".
#


##############################################################################
# Running collection of things to clean up.
CLEANFILES =


##############################################################################
# Build products.
APP := simsq

CLEANFILES += $(APP)


##############################################################################
# Other things to be submitted (source code is handled later).
README  := readme
MORAR   := morar.sh


##############################################################################
# Build system.
MF    := Makefile


##############################################################################
# C++ compiler and flags.
CC     := mpicc
CXX    := mpicxx

# "-MD" generates dependencies; this varies between compilers.
FLAGS  := -fastsse -MD


##############################################################################
# Source code, objects, and compiler-generated dependencies
CSRC    := $(wildcard *.c)
COBJ    := $(CSRC:.c=.o)
CDEP    := $(CSRC:.c=.d)

CXXSRC  := $(wildcard *.cpp)
CXXOBJ  := $(CXXSRC:.cpp=.o)
CXXDEP  := $(CXXSRC:.cpp=.d)

OBJ     := $(COBJ) $(CXXOBJ)
DEP     := $(CDEP) $(CXXDEP)

CLEANFILES += $(OBJ) $(DEP)


##############################################################################
# Output from batch runs.
OUTPUT := $(wildcard *.sh.*)

CLEANFILES += $(OUTPUT)


##############################################################################
# Primary target rules.
default: app

.PHONY: app clean

app: $(APP)

clean:
	rm -f $(CLEANFILES)


##############################################################################
# Autogenerated header dependencies.
-include $(DEP)


##############################################################################
# Libraries.
LIB = -lm


##############################################################################
# Build objects from C source.
%.o : %.c $(MF)
	$(CC) -c $(FLAGS) -o $@ $<


##############################################################################
# Build objects from C++ source.
%.o : %.cpp $(MF)
	$(CXX) -c $(FLAGS) -o $@ $<


##############################################################################
# Build executable from objects.
$(APP): $(OBJ) $(MF)
	$(CXX) -o $(APP) $(OBJ) $(LIB)
